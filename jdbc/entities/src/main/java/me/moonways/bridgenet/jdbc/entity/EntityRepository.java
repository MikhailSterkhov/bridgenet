package me.moonways.bridgenet.jdbc.entity;

import me.moonways.bridgenet.jdbc.entity.criteria.SearchCriteria;

/**
 * Интерфейс для выполнения операций с репозиторием сущностей.
 * <p>
 * Предоставляет методы для вставки, обновления, удаления и поиска сущностей.
 * </p>
 * <p>
 * Примеры использования:
 * <pre>{@code
 * EntityRepository<MyEntity> repository = ...;
 *
 * // Вставка новой сущности
 * MyEntity newEntity = new MyEntity();
 * Mono<EntityID> insertFuture = repository.insert(newEntity);
 * insertFuture.subscribe(id -> System.out.println("Inserted entity ID: " + id));
 *
 * // Поиск сущности по ID
 * Mono<MyEntity> searchFuture = repository.search(1);
 * searchFuture.subscribe(entity -> System.out.println("Found entity: " + entity));
 *
 * // Обновление сущности
 * MyEntity updatedEntity = ...;
 * repository.update(updatedEntity, 1);
 *
 * // Удаление сущности
 * repository.delete(1);
 *
 * // Удаление сущностей по критерию поиска
 * SearchCriteria<MyEntity> criteria = repository.beginCriteria()
 *          .andEquals("status", "inactive");
 * repository.delete(criteria);
 *
 * // Поиск множества сущностей по критерию
 * Multiple<MyEntity> searchFuture = repository.search(criteria);
 * searchFuture.subscribeEach(entity -> System.out.println("Found entity: " + entity));
 * }</pre>
 * </p>
 *
 * @param <T> Тип сущности.
 */
public interface EntityRepository<T> {

    /**
     * Удаляет сущность по её идентификатору.
     * <p>
     * Этот метод удаляет сущность, соответствующую заданному идентификатору, из репозитория.
     * Если сущность с таким идентификатором не найдена, операция игнорируется.
     * </p>
     *
     * @param id Идентификатор сущности.
     */
    void delete(Long id);

    /**
     * Удаляет указанную сущность.
     * <p>
     * Этот метод удаляет переданную сущность из репозитория. Удаление выполняется на основе
     * идентификатора сущности. Если сущность не найдена, операция игнорируется.
     * </p>
     *
     * @param entity Сущность для удаления.
     */
    void delete(T entity);

    /**
     * Удаляет несколько сущностей по их идентификаторам.
     * <p>
     * Этот метод позволяет удалить несколько сущностей, соответствующих переданным идентификаторам.
     * Если одна или несколько сущностей не найдены, они будут пропущены.
     * </p>
     *
     * @param ids Массив идентификаторов сущностей.
     */
    void delete(Long... ids);

    /**
     * Удаляет несколько указанных сущностей.
     * <p>
     * Этот метод удаляет все сущности, переданные в виде массива. Удаление выполняется на основе
     * идентификаторов сущностей. Если сущности не найдены, они будут пропущены.
     * </p>
     *
     * @param entities Массив сущностей для удаления.
     */
    void delete(T... entities);

    /**
     * Удаляет сущности, удовлетворяющие заданному критерию поиска.
     * <p>
     * Этот метод позволяет удалить все сущности, соответствующие критерию поиска, заданному
     * через {@link SearchCriteria}.
     * </p>
     *
     * @param searchCriteria Критерий поиска для удаления сущностей.
     */
    void delete(SearchCriteria<T> searchCriteria);

    /**
     * Обновляет сущность с указанным идентификатором.
     * <p>
     * Этот метод обновляет данные сущности, идентифицируемой по переданному идентификатору, новыми данными
     * из переданной сущности. Если сущность с таким идентификатором не найдена, операция игнорируется.
     * </p>
     *
     * @param entity Сущность с новыми данными.
     * @param id     Идентификатор сущности, которую нужно обновить.
     */
    void update(T entity, Long id);

    /**
     * Обновляет сущности, удовлетворяющие заданному критерию поиска.
     * <p>
     * Этот метод обновляет данные всех сущностей, соответствующих критерию поиска, новыми данными из
     * переданной сущности. Если сущности, удовлетворяющие критерию поиска, не найдены, операция игнорируется.
     * </p>
     *
     * @param entity       Сущность с новыми данными.
     * @param searchCriteria Критерий поиска для обновления сущностей.
     */
    void update(T entity, SearchCriteria<T> searchCriteria);

    /**
     * Вставляет новую сущность в репозиторий.
     * <p>
     * Этот метод вставляет новую сущность в репозиторий и возвращает объект, представляющий
     * асинхронную операцию вставки. Можно подписаться на результат операции для получения
     * вставленного идентификатора сущности.
     * </p>
     *
     * @param entity Сущность для вставки.
     * @return Объект {@code Mono}, представляющий асинхронную операцию вставки.
     */
    Mono<EntityID> insert(T entity);

    /**
     * Вставляет несколько новых сущностей в репозиторий.
     * <p>
     * Этот метод вставляет несколько новых сущностей в репозиторий и возвращает объект,
     * представляющий асинхронную операцию вставки. Можно подписаться на результат операции для
     * получения списка вставленных идентификаторов сущностей.
     * </p>
     *
     * @param entities Массив сущностей для вставки.
     * @return Объект {@code Multiple}, представляющий асинхронную операцию вставки.
     */
    Multiple<EntityID> insert(T... entities);

    /**
     * Выполняет поиск сущности по её идентификатору.
     * <p>
     * Этот метод возвращает объект, представляющий асинхронную операцию поиска сущности по
     * идентификатору. Можно подписаться на результат операции для получения найденной сущности.
     * Если сущность не найдена, результатом будет пустой объект.
     * </p>
     *
     * @param id Идентификатор сущности.
     * @return Объект {@code Mono}, представляющий асинхронную операцию поиска.
     */
    Mono<T> search(Long id);

    /**
     * Выполняет поиск сущности, удовлетворяющей заданному критерию поиска.
     * <p>
     * Этот метод возвращает объект, представляющий асинхронную операцию поиска сущности по
     * критерию, заданному через {@link SearchCriteria}. Можно подписаться на результат операции
     * для получения найденной сущности. Если сущность не найдена, результатом будет пустой объект.
     * </p>
     *
     * @param searchCriteria Критерий поиска.
     * @return Объект {@code Mono}, представляющий асинхронную операцию поиска.
     */
    Mono<T> searchFirst(SearchCriteria<T> searchCriteria);

    /**
     * Выполняет поиск множества сущностей по их идентификаторам.
     * <p>
     * Этот метод возвращает объект, представляющий асинхронную операцию поиска нескольких
     * сущностей по идентификаторам. Можно подписаться на результат операции для получения списка
     * найденных сущностей. Если некоторые сущности не найдены, они будут пропущены.
     * </p>
     *
     * @param ids Массив идентификаторов сущностей.
     * @return Объект {@code Multiple}, представляющий асинхронную операцию поиска.
     */
    Multiple<T> search(Long... ids);

    /**
     * Выполняет поиск множества сущностей, удовлетворяющих заданному критерию поиска.
     * <p>
     * Этот метод возвращает объект, представляющий асинхронную операцию поиска нескольких
     * сущностей по критерию, заданному через {@link SearchCriteria}. Можно подписаться на результат
     * операции для получения списка найденных сущностей. Если некоторые сущности не найдены, они будут пропущены.
     * </p>
     *
     * @param searchCriteria Критерий поиска.
     * @return Объект {@code Multiple}, представляющий асинхронную операцию поиска.
     */
    Multiple<T> search(SearchCriteria<T> searchCriteria);

    /**
     * Выполняет поиск множества сущностей, удовлетворяющих заданному критерию поиска, с ограничением на количество.
     * <p>
     * Этот метод возвращает объект, представляющий асинхронную операцию поиска нескольких
     * сущностей по критерию, заданному через {@link SearchCriteria}, с ограничением на количество
     * результатов. Можно подписаться на результат операции для получения списка найденных сущностей.
     * Если некоторые сущности не найдены, они будут пропущены.
     * </p>
     *
     * @param limit        Максимальное количество результатов.
     * @param searchCriteria Критерий поиска.
     * @return Объект {@code Multiple}, представляющий асинхронную операцию поиска.
     */
    Multiple<T> search(int limit, SearchCriteria<T> searchCriteria);

    /**
     * Выполняет поиск всех сущностей с ограничением на количество.
     * <p>
     * Этот метод возвращает объект, представляющий асинхронную операцию поиска всех сущностей
     * с ограничением на количество результатов. Можно подписаться на результат операции для
     * получения списка найденных сущностей.
     * </p>
     *
     * @param limit Максимальное количество результатов.
     * @return Объект {@code Multiple}, представляющий асинхронную операцию поиска.
     */
    Multiple<T> searchAll(int limit);

    /**
     * Выполняет поиск всех сущностей.
     * <p>
     * Этот метод возвращает объект, представляющий асинхронную операцию поиска всех сущностей.
     * Можно подписаться на результат операции для получения списка всех найденных сущностей.
     * </p>
     *
     * @return Объект {@code Multiple}, представляющий асинхронную операцию поиска.
     */
    Multiple<T> searchAll();

    /**
     * Создает новый экземпляр {@code SearchMarker} для создания критериев поиска.
     * <p>
     * Этот метод возвращает новый экземпляр {@link SearchCriteria}, который можно использовать для
     * задания критериев поиска при выполнении операций поиска и удаления сущностей.
     * </p>
     *
     * @return Новый экземпляр {@code SearchMarker}.
     */
    SearchCriteria<T> beginCriteria();
}
